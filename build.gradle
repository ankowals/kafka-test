import org.apache.avro.Conversions

plugins {
    id 'java'
    id 'com.diffplug.spotless' version "7.0.2"
    id 'io.micronaut.application' version "4.4.4"
    id 'io.micronaut.aot' version "4.4.4"
    id 'com.github.davidmc24.gradle.plugin.avro' version "1.9.1" //unmaintained, find suitable alternative
}

group 'com.github.ankowals.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url 'https://packages.confluent.io/maven/' }
}

dependencies {
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("org.projectlombok:lombok:1.18.36")

    implementation("io.micronaut.kafka:micronaut-kafka")
    implementation("io.micronaut.kafka:micronaut-kafka-streams")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut:micronaut-http-client")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.yaml:snakeyaml")

    compileOnly("org.projectlombok:lombok:1.18.36")
    runtimeOnly("ch.qos.logback:logback-classic")

    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.testcontainers:kafka")
    testImplementation("io.confluent:kafka-avro-serializer:7.8.0") {
        exclude group: "org.apache.kafka", module: "kafka-clients"
    }
    testImplementation("io.confluent:kafka-streams-avro-serde:7.8.0") {
        exclude group: "org.apache.kafka", module: "kafka-clients"
    }
    testImplementation("org.apache.avro:avro:1.12.0")
    testImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-avro:2.18.3")
    testImplementation("org.junit.platform:junit-platform-launcher:1.12.0")
    testImplementation("org.assertj:assertj-core:3.27.3")
    testImplementation("org.awaitility:awaitility:4.3.0")
    testImplementation("net.javacrumbs.json-unit:json-unit-assertj:4.1.0")
    testImplementation("org.apache.commons:commons-lang3:3.17.0")
    testImplementation("org.json:json:20250107")
    testImplementation("org.wiremock:wiremock-standalone:3.12.0") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    testImplementation("io.github.glytching:junit-extensions:2.6.0")
}

application {
    mainClass = "com.github.ankowals.example.kafka.Application"
}

java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}

graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.github.ankowals.example.*")
    }

    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
}

tasks.named("dockerfileNative") {
    jdkVersion = "21"
}

spotless {
    java {
        googleJavaFormat()
    }
}

avro {
    stringType = "CharSequence"
    fieldVisibility = "private"
    customConversion Conversions.UUIDConversion
}